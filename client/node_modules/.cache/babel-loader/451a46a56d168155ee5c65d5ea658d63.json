{"ast":null,"code":"export function getTimers(success) {\n  console.log(`client > getTimers`);\n  return fetch('/api/timers', {\n    headers: {\n      Accept: 'application/json'\n    }\n  }).then(checkStatus).then(parseJSON).then(success);\n}\nexport function createTimer(data) {\n  return fetch('/api/timers', {\n    method: 'post',\n    body: JSON.stringify(data),\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(checkStatus);\n}\nexport function updateTimer(data) {\n  return fetch('/api/timers', {\n    method: 'put',\n    body: JSON.stringify(data),\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(checkStatus);\n}\nexport function deleteTimer(data) {\n  return fetch('/api/timers', {\n    method: 'delete',\n    body: JSON.stringify(data),\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(checkStatus);\n}\nexport function startTimer(data) {\n  return fetch('/api/timers/start', {\n    method: 'post',\n    body: JSON.stringify(data),\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(checkStatus);\n}\nexport function stopTimer(data) {\n  return fetch('/api/timers/stop', {\n    method: 'post',\n    body: JSON.stringify(data),\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(checkStatus);\n}\n\nfunction checkStatus(response) {\n  console.log(`client > checkStatus> ${JSON.stringify(response)}`);\n\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  } else {\n    const error = new Error(`HTTP Error ${response.statusText}`);\n    error.status = response.statusText;\n    error.response = response;\n    console.log(error);\n    throw error;\n  }\n}\n\nfunction parseJSON(response) {\n  return response.json();\n}","map":{"version":3,"sources":["/Users/amandariu/development/sandbox/react-time-tracking-app/client/src/network/client.js"],"names":["getTimers","success","console","log","fetch","headers","Accept","then","checkStatus","parseJSON","createTimer","data","method","body","JSON","stringify","updateTimer","deleteTimer","startTimer","stopTimer","response","status","error","Error","statusText","json"],"mappings":"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","sourcesContent":["export function getTimers( success ) {\n    console.log( `client > getTimers` );\n    return fetch( '/api/timers', {\n        headers: {\n            Accept: 'application/json',\n        },\n    } ).then( checkStatus )\n        .then( parseJSON )\n        .then( success );\n}\n\nexport function createTimer( data ) {\n    return fetch( '/api/timers', {\n        method: 'post',\n        body: JSON.stringify( data ),\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n    } ).then( checkStatus );\n}\n\nexport function updateTimer( data ) {\n    return fetch( '/api/timers', {\n        method: 'put',\n        body: JSON.stringify( data ),\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n    } ).then( checkStatus );\n}\n\nexport function deleteTimer( data ) {\n    return fetch( '/api/timers', {\n        method: 'delete',\n        body: JSON.stringify( data ),\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n    } ).then( checkStatus );\n}\n\nexport function startTimer( data ) {\n    return fetch( '/api/timers/start', {\n        method: 'post',\n        body: JSON.stringify( data ),\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n    } ).then( checkStatus );\n}\n\nexport function stopTimer( data ) {\n    return fetch( '/api/timers/stop', {\n        method: 'post',\n        body: JSON.stringify( data ),\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n    } ).then( checkStatus );\n}\n\nfunction checkStatus( response ) {\n    console.log( `client > checkStatus> ${JSON.stringify( response )}` );\n    if ( response.status >= 200 && response.status < 300 ) {\n        return response;\n    } else {\n        const error = new Error( `HTTP Error ${response.statusText}` );\n        error.status = response.statusText;\n        error.response = response;\n        console.log( error );\n        throw error;\n    }\n}\n\nfunction parseJSON( response ) {\n    return response.json();\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/amandariu/development/sandbox/react-time-tracking-app/client/src/App.js\";\nimport './App.css';\nimport React from 'react';\nimport EditableTimerList from './components/EditableTimerList';\nimport ToggleableTimerForm from './components/ToggleableTimerForm';\nimport { newTimer } from './utils/helpers';\nimport { getTimers } from './network/client';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      timers: []\n    };\n\n    this.loadTimersFromServer = () => {\n      getTimers(serverTimers => {\n        console.log(`App > loadTimersFromServer > ${serverTimers}`);\n        this.setState({\n          timers: serverTimers\n        });\n      });\n    };\n\n    this.handleCreateFormSubmit = timer => {\n      this.createTimer(timer);\n    };\n\n    this.createTimer = timer => {\n      const t = newTimer(timer);\n      this.setState({\n        timers: this.state.timers.concat(t)\n      });\n    };\n\n    this.handleEditFormSubmit = attrs => {\n      this.updateTimer(attrs);\n    };\n\n    this.handleTrashClick = timerId => {\n      this.setState({\n        timers: this.state.timers.filter(t => t.id !== timerId)\n      });\n    };\n\n    this.handleStartClick = timerId => {\n      this.startTimer(timerId);\n    };\n\n    this.handleStopClick = timerId => {\n      this.stopTimer(timerId);\n    };\n\n    this.startTimer = timerId => {\n      const now = Date.now();\n      this.setState({\n        timers: this.state.timers.map(timer => {\n          if (timer.id === timerId) {\n            return Object.assign({}, timer, {\n              runningSince: now\n            });\n          } else {\n            return timer;\n          }\n        })\n      });\n    };\n\n    this.stopTimer = timerId => {\n      const now = Date.now();\n      this.setState({\n        timer: this.state.timers.map(timer => {\n          if (timer.id === timerId) {\n            const lastElapsed = now - timer.runningSince;\n            return Object.assign({}, timer, {\n              elapsed: timer.elapsed + lastElapsed,\n              runningSince: null\n            });\n          } else {\n            return timer;\n          }\n        })\n      });\n    };\n\n    this.updateTimer = attrs => {\n      this.setState({\n        timers: this.state.timers.map(timer => {\n          if (timer.id === attrs.id) {\n            return Object.assign({}, timer, {\n              title: attrs.title,\n              project: attrs.project\n            });\n          } else {\n            return timer;\n          }\n        })\n      });\n    };\n  }\n\n  componentDidMount() {\n    console.log(`App > componentDidMount`);\n    this.loadTimersFromServer();\n    setInterval(this.loadTimersFromServer, 5000);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui three column centered grid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        children: [/*#__PURE__*/_jsxDEV(EditableTimerList, {\n          timers: this.state.timers,\n          onFormSubmit: this.handleEditFormSubmit,\n          onTrashClick: this.handleTrashClick,\n          onStartClick: this.handleStartClick,\n          onStopClick: this.handleStopClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ToggleableTimerForm, {\n          onFormSubmit: this.handleCreateFormSubmit,\n          isOpen: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/amandariu/development/sandbox/react-time-tracking-app/client/src/App.js"],"names":["React","EditableTimerList","ToggleableTimerForm","newTimer","getTimers","App","Component","state","timers","loadTimersFromServer","serverTimers","console","log","setState","handleCreateFormSubmit","timer","createTimer","t","concat","handleEditFormSubmit","attrs","updateTimer","handleTrashClick","timerId","filter","id","handleStartClick","startTimer","handleStopClick","stopTimer","now","Date","map","Object","assign","runningSince","lastElapsed","elapsed","title","project","componentDidMount","setInterval","render"],"mappings":"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","sourcesContent":["import './App.css';\nimport React from 'react';\n\nimport EditableTimerList from './components/EditableTimerList';\nimport ToggleableTimerForm from './components/ToggleableTimerForm';\nimport { newTimer } from './utils/helpers';\nimport { getTimers } from './network/client';\n\nclass App extends React.Component {\n  state = {\n    timers: [],\n  };\n\n  componentDidMount() {\n    console.log( `App > componentDidMount` );\n    this.loadTimersFromServer();\n    setInterval( this.loadTimersFromServer, 5000 );\n  }\n\n  loadTimersFromServer = () => {\n    getTimers( ( serverTimers ) => {\n      console.log( `App > loadTimersFromServer > ${serverTimers}` );\n      this.setState( { timers: serverTimers } );\n    } );\n  };\n\n  handleCreateFormSubmit = ( timer ) => {\n    this.createTimer( timer );\n  };\n\n  createTimer = ( timer ) => {\n    const t = newTimer( timer );\n    this.setState( {\n      timers: this.state.timers.concat( t )\n    } );\n  };\n\n  handleEditFormSubmit = ( attrs ) => {\n    this.updateTimer( attrs );\n  };\n\n  handleTrashClick = ( timerId ) => {\n    this.setState( {\n      timers: this.state.timers.filter( t => t.id !== timerId )\n    } );\n  };\n\n  handleStartClick = ( timerId ) => {\n    this.startTimer( timerId );\n  };\n\n  handleStopClick = ( timerId ) => {\n    this.stopTimer( timerId );\n  };\n\n  startTimer = ( timerId ) => {\n    const now = Date.now();\n\n    this.setState( {\n      timers: this.state.timers.map( ( timer ) => {\n        if ( timer.id === timerId ) {\n          return Object.assign( {}, timer, {\n            runningSince: now,\n          } );\n        } else {\n          return timer;\n        }\n      } )\n    } );\n  };\n\n  stopTimer = ( timerId ) => {\n    const now = Date.now();\n\n    this.setState( {\n      timer: this.state.timers.map( ( timer ) => {\n        if ( timer.id === timerId ) {\n          const lastElapsed = now - timer.runningSince;\n          return Object.assign( {}, timer, {\n            elapsed: timer.elapsed + lastElapsed,\n            runningSince: null,\n          } );\n        } else {\n          return timer;\n        }\n      } )\n    } );\n  };\n\n  updateTimer = ( attrs ) => {\n    this.setState( {\n      timers: this.state.timers.map( ( timer ) => {\n        if ( timer.id === attrs.id ) {\n          return Object.assign( {}, timer, {\n            title: attrs.title,\n            project: attrs.project,\n          } );\n        } else {\n          return timer;\n        }\n      } )\n    } );\n  };\n\n  render() {\n    return (\n      <div className=\"ui three column centered grid\">\n        <div className=\"column\">\n          <EditableTimerList\n            timers={ this.state.timers }\n            onFormSubmit={ this.handleEditFormSubmit }\n            onTrashClick={ this.handleTrashClick }\n            onStartClick={ this.handleStartClick }\n            onStopClick={ this.handleStopClick }\n          />\n          <ToggleableTimerForm\n            onFormSubmit={ this.handleCreateFormSubmit }\n            isOpen={ false }\n          />\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}
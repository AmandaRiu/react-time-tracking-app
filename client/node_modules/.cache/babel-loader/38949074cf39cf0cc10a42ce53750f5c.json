{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nexport function newTimer(attrs = {}) {\n  const timer = {\n    title: attrs.title || 'Timer',\n    project: attrs.project || 'Project',\n    id: uuidv4(),\n    // eslint-disable-line no-undef\n    elapsed: 0,\n    runningSince: 0\n  };\n  return timer;\n}\nexport function findById(array, id, cb) {\n  array.forEach(el => {\n    if (el.id === id) {\n      cb(el);\n      return;\n    }\n  });\n}\nexport function renderElapsedString(elapsed, runningSince) {\n  let totalElapsed = elapsed;\n\n  if (runningSince) {\n    totalElapsed += Date.now() - runningSince;\n  }\n\n  return millisecondsToHuman(totalElapsed);\n}\nexport function millisecondsToHuman(ms) {\n  const seconds = Math.floor(ms / 1000 % 60);\n  const minutes = Math.floor(ms / 1000 / 60 % 60);\n  const hours = Math.floor(ms / 1000 / 60 / 60);\n  const humanized = [pad(hours.toString(), 2), pad(minutes.toString(), 2), pad(seconds.toString(), 2)].join(':');\n  return humanized;\n}\n\nfunction pad(numberString, size) {\n  let padded = numberString;\n\n  while (padded.length < size) padded = `0${padded}`;\n\n  return padded;\n}","map":{"version":3,"sources":["/Users/amandariu/development/sandbox/react-time-tracking-app/client/src/utils/helpers.js"],"names":["v4","uuidv4","newTimer","attrs","timer","title","project","id","elapsed","runningSince","findById","array","cb","forEach","el","renderElapsedString","totalElapsed","Date","now","millisecondsToHuman","ms","seconds","Math","floor","minutes","hours","humanized","pad","toString","join","numberString","size","padded","length"],"mappings":"AAAA,SAASA,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAEA,OAAO,SAASC,QAAT,CAAmBC,KAAK,GAAG,EAA3B,EAAgC;AACnC,QAAMC,KAAK,GAAG;AACVC,IAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,IAAe,OADZ;AAEVC,IAAAA,OAAO,EAAEH,KAAK,CAACG,OAAN,IAAiB,SAFhB;AAGVC,IAAAA,EAAE,EAAEN,MAAM,EAHA;AAGI;AACdO,IAAAA,OAAO,EAAE,CAJC;AAKVC,IAAAA,YAAY,EAAE;AALJ,GAAd;AAQA,SAAOL,KAAP;AACH;AAED,OAAO,SAASM,QAAT,CAAmBC,KAAnB,EAA0BJ,EAA1B,EAA8BK,EAA9B,EAAmC;AACtCD,EAAAA,KAAK,CAACE,OAAN,CAAiBC,EAAF,IAAU;AACrB,QAAKA,EAAE,CAACP,EAAH,KAAUA,EAAf,EAAoB;AAChBK,MAAAA,EAAE,CAAEE,EAAF,CAAF;AACA;AACH;AACJ,GALD;AAMH;AAED,OAAO,SAASC,mBAAT,CAA8BP,OAA9B,EAAuCC,YAAvC,EAAsD;AACzD,MAAIO,YAAY,GAAGR,OAAnB;;AACA,MAAKC,YAAL,EAAoB;AAChBO,IAAAA,YAAY,IAAIC,IAAI,CAACC,GAAL,KAAaT,YAA7B;AACH;;AACD,SAAOU,mBAAmB,CAAEH,YAAF,CAA1B;AACH;AAED,OAAO,SAASG,mBAAT,CAA8BC,EAA9B,EAAmC;AACtC,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAcH,EAAE,GAAG,IAAP,GAAgB,EAA5B,CAAhB;AACA,QAAMI,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAcH,EAAE,GAAG,IAAL,GAAY,EAAd,GAAqB,EAAjC,CAAhB;AACA,QAAMK,KAAK,GAAGH,IAAI,CAACC,KAAL,CAAYH,EAAE,GAAG,IAAL,GAAY,EAAZ,GAAiB,EAA7B,CAAd;AAEA,QAAMM,SAAS,GAAG,CACdC,GAAG,CAAEF,KAAK,CAACG,QAAN,EAAF,EAAoB,CAApB,CADW,EAEdD,GAAG,CAAEH,OAAO,CAACI,QAAR,EAAF,EAAsB,CAAtB,CAFW,EAGdD,GAAG,CAAEN,OAAO,CAACO,QAAR,EAAF,EAAsB,CAAtB,CAHW,EAIhBC,IAJgB,CAIV,GAJU,CAAlB;AAMA,SAAOH,SAAP;AACH;;AAED,SAASC,GAAT,CAAcG,YAAd,EAA4BC,IAA5B,EAAmC;AAC/B,MAAIC,MAAM,GAAGF,YAAb;;AACA,SAAQE,MAAM,CAACC,MAAP,GAAgBF,IAAxB,EAA+BC,MAAM,GAAI,IAAGA,MAAO,EAApB;;AAC/B,SAAOA,MAAP;AACH","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nexport function newTimer( attrs = {} ) {\n    const timer = {\n        title: attrs.title || 'Timer',\n        project: attrs.project || 'Project',\n        id: uuidv4(), // eslint-disable-line no-undef\n        elapsed: 0,\n        runningSince: 0,\n    };\n\n    return timer;\n}\n\nexport function findById( array, id, cb ) {\n    array.forEach( ( el ) => {\n        if ( el.id === id ) {\n            cb( el );\n            return;\n        }\n    } );\n}\n\nexport function renderElapsedString( elapsed, runningSince ) {\n    let totalElapsed = elapsed;\n    if ( runningSince ) {\n        totalElapsed += Date.now() - runningSince;\n    }\n    return millisecondsToHuman( totalElapsed );\n}\n\nexport function millisecondsToHuman( ms ) {\n    const seconds = Math.floor( ( ms / 1000 ) % 60 );\n    const minutes = Math.floor( ( ms / 1000 / 60 ) % 60 );\n    const hours = Math.floor( ms / 1000 / 60 / 60 );\n\n    const humanized = [\n        pad( hours.toString(), 2 ),\n        pad( minutes.toString(), 2 ),\n        pad( seconds.toString(), 2 ),\n    ].join( ':' );\n\n    return humanized;\n}\n\nfunction pad( numberString, size ) {\n    let padded = numberString;\n    while ( padded.length < size ) padded = `0${padded}`;\n    return padded;\n}\n\n"]},"metadata":{},"sourceType":"module"}